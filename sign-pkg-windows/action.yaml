name: sign-pkg-windows
description:
  Sign and package the Windows Linden viewer.

##inputs:
##  channel:
##    description: "Viewer channel"
##    type: string
##    required: true
##  version:
##    description: "Viewer version"
##    type: string
##    required: true

runs:
  using: composite
  steps:
    - name: Fetch Windows app
      uses: actions/download-artifact@v3
      with:
        name: Windows-app
        path: .app

    - name: Sign the executables
      shell: bash
      run: |
        for exe in .app/SecondLifeViewer.exe \
                   .app/SLVersionChecker.exe \
                   .app/llplugin/dullahan_host.exe
        do
            # TODO - ls for now to verify that we're looking in the right places
            ls -l "$exe"
        done

    - name: Build the installer
      shell: python
      run: |
        # Logic derived from viewer_manifest.py - still needed though?
        # Use Python because bash refuses to expand "${programfiles(x86)}" --
        # even though that's really the name of the Windows environment
        # variable.
        import os
        import shlex
        import subprocess
        nsis_path = "makensis.exe"
        try:
            for program_files in os.getenv('programfiles'), os.getenv('programfiles(x86)'):
                if program_files:
                    for subpath in 'NSIS', r'NSIS\Unicode':
                        possible_path = os.path.join(program_files, subpath, nsis_path)
                        if os.path.isfile(possible_path):
                            nsis_path = possible_path
                            # don't just break: we need to exit multiple
                            # levels of 'for' loop
                            raise StopIteration()
        except StopIteration:
            pass

        # This .nsi file was prepared by viewer_manifest.py (by substituting
        # values into a template .nsi file) and bundled into the top level of
        # the Windows-app artifact.
        command = [nsis_path, '/V2', r'.app\secondlife_setup_tmp.nsi']
        print(shlex.join(command))
        subprocess.check_call(command)

    - name: Sign the installer
      shell: bash
      run: |
        installer="$(ls -t *_Setup.exe | head -n 1)"
        # TODO - ls for now to verify that we're looking in the right place
        ls -l "$installer"
        # pass installer to next step
        echo "installer=$installer" >> "$GITHUB_ENV"

    - name: Post the installer
      uses: actions/upload-artifact@v3
      with:
        name: "Windows-installer"
        path: ${{ env.installer }}
