name: sign-pkg-windows
description:
  Sign and package the Windows Alchemy Viewer.

inputs:
  vault_uri:
    description: "Azure key vault URI"
    required: false
  cert_name:
    description: "Name of certificate on Azure"
    required: false
  client_id:
    description: "Azure signer app clientId"
    required: false
  client_secret:
    description: "Azure signer app clientSecret"
    required: false
  tenant_id:
    description: "Azure signer app tenantId"
    required: false

runs:
  using: composite
  steps:
    - name: Fetch Windows app
      uses: actions/download-artifact@v5
      with:
        name: Windows-app
        path: .app

    - name: Install Python dependencies
      shell: bash
      run: pip install pyng

    - name: Install AzureSignTool
      if: inputs.vault_uri && inputs.cert_name && inputs.client_id && inputs.client_secret && inputs.tenant_id
      shell: bash
      run: dotnet tool install --global AzureSignTool

    - name: Sign the executables
      if: inputs.vault_uri && inputs.cert_name && inputs.client_id && inputs.client_secret && inputs.tenant_id
      shell: bash
      run: |
        for exe in .app/SecondLifeViewer.exe \
                   .app/SLVersionChecker.exe \
                   .app/llplugin/dullahan_host.exe
        do
            python "${{ github.action_path }}/sign.py" \
                   --vault_uri "${{ inputs.vault_uri }}" \
                   --cert_name "${{ inputs.cert_name }}" \
                   --client_id "${{ inputs.client_id }}" \
                   --client_secret "${{ inputs.client_secret }}" \
                   --tenant_id "${{ inputs.tenant_id }}" \
                   "$exe"
        done

    - name: Build the installer
      id: iscc
      shell: bash
      run: |
        pushd ".app"
          iscc.exe -Q alchemy_setup_tmp.iss
        popd

    - name: Dump ISS input file
      if: ${{ failure() && steps.isccZ.conclusion == 'failure' }}
      shell: bash
      run: cat '.app/alchemy_setup_tmp.iss'

    - name: Export installer path to env
      shell: bash
      run: |
        # pass installer to next steps
        installer="$(ls -t .app/*_Setup.exe | head -n 1)"
        echo "installer=$installer" >> "$GITHUB_ENV"

    - name: Sign the installer
      if: inputs.vault_uri && inputs.cert_name && inputs.client_id && inputs.client_secret && inputs.tenant_id
      shell: bash
      run: |
        python "${{ github.action_path }}/sign.py" \
               --vault_uri "${{ inputs.vault_uri }}" \
               --cert_name "${{ inputs.cert_name }}" \
               --client_id "${{ inputs.client_id }}" \
               --client_secret "${{ inputs.client_secret }}" \
               --tenant_id "${{ inputs.tenant_id }}" \
               "${{ env.installer }}"

    - name: Post the installer
      uses: actions/upload-artifact@v4
      with:
        name: "Windows-installer"
        path: ${{ env.installer }}
