name: sign-pkg-windows
description:
  Sign and package the Windows Linden viewer.

inputs:
  services:
    description: "space-separated list of timestamp service URLs"
    type: string
    required: false
    default: "http://timestamp.globalsign.com/scripts/timstamp.dll http://timestamp.comodoca.com/authenticode"

runs:
  using: composite
  steps:
    - name: Fetch Windows app
      uses: actions/download-artifact@v3
      with:
        name: Windows-app
        path: .app

    - name: Install Python dependencies
      shell: bash
      run: pip install pyng autobuild

    - name: Sign the executables
      shell: bash
      run: |
        for exe in .app/SecondLifeViewer.exe \
                   .app/SLVersionChecker.exe \
                   .app/llplugin/dullahan_host.exe
        do
            python "${{ github.action_path }}/sign.py" \
                   --service ${{ inputs.services }} \
                   --certificate "authenticode-cert.pfx" \
                   "$exe"
        done

    - name: Build the installer
      id: nsis
      shell: python
      run: |
        # Logic derived from viewer_manifest.py - still needed though?
        # Use Python because bash refuses to expand "${programfiles(x86)}" --
        # even though that's really the name of the Windows environment
        # variable.
        import os
        import shlex
        from shutil import which
        import subprocess
        nsis_path = which(
            "makensis",
            path=os.pathsep.join(
                os.path.join(program_files, subpath)
                for program_files in
                (os.getenv(var) for var in ('programfiles', 'programfiles(x86)'))
                for subpath in ('NSIS', r'NSIS\Unicode')
                if program_files))
        assert nsis_path

        # This .nsi file was prepared by viewer_manifest.py (by substituting
        # values into a template .nsi file) and bundled into the top level of
        # the Windows-app artifact.
        command = [nsis_path, '/V2', 'secondlife_setup_tmp.nsi']
        print(shlex.join(command))
        subprocess.check_call(command, cwd='.app')

    - name: Dump NSIS input file
      if: ${{ failure() && steps.nsis.conclusion == 'failure' }}
      shell: bash
      run: cat '.app/secondlife_setup_tmp.nsi'

    - name: Sign the installer
      shell: bash
      run: |
        installer="$(ls -t .app/*_Setup.exe | head -n 1)"
        # pass installer to next step
        echo "installer=$installer" >> "$GITHUB_ENV"
        python "${{ github.action_path }}/sign.py" \
               --service ${{ inputs.services }} \
               --certificate "authenticode-cert.pfx" \
               "$installer"

    - name: Post the installer
      uses: actions/upload-artifact@v3
      with:
        name: "Windows-installer"
        path: ${{ env.installer }}
